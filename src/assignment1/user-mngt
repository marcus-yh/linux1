#!/bin/bash
# user-mngt

# set options
set -eu
set -o pipefail

# initialize global variabels
csv_file=null
gen_passwd=false

# declare/initialize global constants
readonly script_path=$(realpath "$0")
readonly script_name=$(basename "${script_path}")
readonly log_file=/var/log/${script_name}.log

usage=$(
	cat <<END

Usage: 
	${script_name} [-h|--help]Â [-p|--passwd] CSV-FILE
	-h, --help:	Display this help and exit
	-p, --passwd:	When this flag is specified a password will be set
			for the user
	CSV-FILE:	Path to an existing csv file including comma separated
			data: <first-name>,<last-name>,<password>,<add/remove>
Examples:
	Manage users without creating passwords for new users:	sudo ${script_name} ~/users.csv" 
	Manage users and add password for new users:		sudo ${script_name} -p ~/users.csv"
END
)

function help() {
	# output help text to stdout
	echo "${usage}"
}

#function log() {
#	msg="$1"

# format a message so that it is prepended with a timestamp and redirect to stderr
#printf '[%s] %s\n' "$(date '+%Y-%m-%d %H:%M:%S.%3N')" "${msg}" >&2
#	echo "${msg}" >&2
#}

function encrypt_passwd() {
	local username="$1"
	local passwd="$2"

	# output 'Generating hash for <username>' to stderr
	echo "Generating hash for ${username}" >&2
	passwd=$(mkpasswd -m SHA-512 "${passwd}")
	echo \'"${passwd}"\'
}

function add() {
	local fname="$1"
	local lname="$2"
	local passwd="${3:-null}"
	local username=${fname:0:3}${lname:0:3}

	# build command
	#cmd="useradd --comment \"${fname} ${lname}\""
	#cmd="adduser --gecos '${fname} ${lname}' "
	if [ "${passwd}" == null ]; then
		cmd="adduser --disabled-login --gecos \"${fname} ${lname}\" --home /home/${username} ${username}"
		# encrypt password
		#passwd=$(encrypt_passwd "${username}" "${passwd}")
		#cmd+=" -p ${passwd} ${username}"
	else
		# set password expired
		#cmd+=" \"${username}\" && passwd -e \"${username}\""
		passwd=$(encrypt_passwd "${username}" "${passwd}")
		cmd="useradd --comment \"${fname} ${lname}\" -p ${passwd} ${username} -m --home /home/${username}"
	fi

	# execute command
	if eval "${cmd} >/dev/null"; then
		# success => output "Add <username>" to stdout and logfile
		echo "Add ${username}" | tee -a "${log_file}"
	else
		# error => output error message to stderr
		echo "Error while adding user ${username} " 1>&2
	fi
}

function remove() {
	local fname="$1"
	local lname="$2"
	local username=${fname:0:3}${lname:0:3}

	#echo "function remove: userdel ${username}"

	# remove user
	if id "${username}" >/dev/null; then
		userdel -r "${username}"
		# success => output "Remove <username>" to stdout and logfile
		echo "Remove ${username}" | tee -a "${log_file}"
	else
		# error => output error to stderr
		echo "Error while removing user ${username}" >&2
	fi
}

function update_users() {
	# redirect <csv_file> to stdin and process/parse the csv data at
	# each line into variables and call function add/remove
	while IFS=, read -r fname lname passwd func; do
		cmd="${func} ${fname} ${lname}"
		if [[ ${gen_passwd} == true && "${func}" == "add" ]]; then
			cmd+=" ${passwd}"
		fi
		# execute command
		${cmd}
	done <"${csv_file}"
}

# process/validate script args and flags
while [ $# -gt 0 ]; do
	case "$1" in
	-h | --help)
		help
		exit 0
		;;
	-p | --passwd)
		gen_passwd=true
		shift
		;;
	-*)
		echo "Invalid_option $1"
		help
		exit 1
		;;
	*)
		csv_file="$1"
		break
		;;
	esac
done

# validate that the sript is called with exactly one parameter
if [ $# -gt 1 ]; then
	echo "Script '${script_name}' must be called with exactly one argument"
	exit 1
elif [ "$csv_file" = null ]; then
	echo "Missing required <CSV-FILE> argument" >&2
	help
	exit 1
fi

# validate that specified <CSV-FILE> argument is a file
if [ ! -f "${csv_file}" ]; then
	echo "Specified path '${csv_file}' is not a file" >&2
	exit 1
fi

update_users
